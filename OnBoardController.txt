#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <Servo.h>
#include <VirtualWire.h>

//The pin mapping for the GPS
static const int GPSDataIn = 51;
static const int GPSDataOut = 53;
static const uint32_t GPSBaud = 9600;

//The pin mapping for the servos
static const int sterringServoIn = -1;
static const int throttleServoIn = -1;

//The pin mapping for the RX 
static const int rxDataIn = 78;
//Create a TinyGPS Object
TinyGPSPlus gps;

//Create a Servo Object
Servo steeringServo;
Servo throttleServo;

//Serial connection to GPS Device
SoftwareSerial ss(GPSDataIn,GPSDataOut);

void setup() {

	//Initilization of GPS
	Serial.begin(115200);
	ss.begin(GPSBaud);
	
	//Initilization of Servo
	steeringServo.attach(steeringServoIn);
	throttleServo.attach(throttleServoIn);
	
	//Initilization of RX
	vw_set_ptt_inverted(true);
	vw_set_rx_pin(78);
	vw_setup(4000); //Bits per second
	vw_rx_start();
}

void loop() {
	

	double latitude;
	double longitude; 
	int launchSignal = 0;
	
	//Search for the target
	
	//Calculate GPS Position of Target
	
	//Navigate
	
	//Get GPS location 

	//Finished
}

//Function used to recieve lat data from the EMILY
double getLatitudeFromEMILY() {
	double latitude = 0.0;
	uint8_t buf[VW_MAX_MESSAGE_LEN];
	uint8_t buflen = VW_MAX_MESSAGE_LEN;
	
	if(vw_get_message(buf,&buflen)) {
		latitude = buf;
	}
	
	return latitude;
}

//Function used to recieve long data from the EMILY
double getLongitudeFromEMILY() {
	double longitude = 0.0;
	uint8_t buf[VW_MAX_MESSAGE_LEN];
	uint8_t buflen = VW_MAX_MESSAGE_LEN;
	
	if(vw_get_message(buf,&buflen)) {
		longitude = buf;
	}
	
	return longitude;
}

//Functions to control the two servos responsible for controlling EMILY.
//The servos operate in a range of 0-1, 0 being full left, 1 full right

void turnFullRight() {
	steeringServo.write(0.75);
	throttleServo.write(1);
}

void turnFullLeft() {
	steeringServo.write(0.25);
	throttleServo.write(1);
}

void goStraightFull() {
	steeringServo.write(0.5);
	throttleServo.write(1);
}

void goStraightPartial() {
	steeringServo.write(0.5);
	throttleServo.write(0.5);
}

void turnPartialRight() {
	steeringServo.write(0.6);
	throttleServo.write(1);
}

void turnPartialLeft() {
	steeringServo.write(0.4);
	throttleServo.write(1);
}

void stop() {
	steeringServo.write(0.5);
	throttleServo.write(0);
}
